error[E0080]: evaluation of `<bytemuck::cast::VecT as bytemuck::cast::AssertClassContraints<[u8; 2], u16>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  |     const ASSERT: () = assert!(
  |  ______________________^
  | |     Src::ALIGN == Dst::ALIGN,
  | |     "Attempted conversion between `Vec` types with different alignments"
  | |   );
  | |___^ the evaluated program panicked at 'Attempted conversion between `Vec` types with different alignments', $WORKSPACE/src/cast.rs:1342:22
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0080]: evaluation of `<bytemuck::cast::RawSlice<[u8; 2]> as bytemuck::cast::CastRaw<bytemuck::cast::RawSlice<u16>>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  | /     assert!(
  | |       align_of::<Src>() >= align_of::<Dst>(),
  | |       "Attempted conversion to a type with a stricter alignment"
  | |     )
  | |_____^ the evaluated program panicked at 'Attempted conversion to a type with a stricter alignment', $WORKSPACE/src/cast.rs:910:5
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: erroneous constant used
   --> $WORKSPACE/src/cast.rs
    |
    |   const ASSERT: () = <RawSlice<Src> as CastRaw<RawSlice<Dst>>>::ASSERT;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

note: the above error was encountered while instantiating `fn <std::vec::Vec<[u8; 2]> as bytemuck::ReinterpretInner<'_, std::vec::Vec<u16>>>::reinterpret_inner`
 --> tests/ui/reinterpret_inner_vec.rs:4:21
  |
4 |   let _: Vec<u16> = vec![[0u8; 2]; 2].reinterpret_inner();
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0080]: evaluation of `<bytemuck::cast::VecT as bytemuck::cast::AssertClassContraints<[u16; 2], u32>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  |     const ASSERT: () = assert!(
  |  ______________________^
  | |     Src::ALIGN == Dst::ALIGN,
  | |     "Attempted conversion between `Vec` types with different alignments"
  | |   );
  | |___^ the evaluated program panicked at 'Attempted conversion between `Vec` types with different alignments', $WORKSPACE/src/cast.rs:1342:22
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0080]: evaluation of `<bytemuck::cast::RawSlice<[u16; 2]> as bytemuck::cast::CastRaw<bytemuck::cast::RawSlice<u32>>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  | /     assert!(
  | |       align_of::<Src>() >= align_of::<Dst>(),
  | |       "Attempted conversion to a type with a stricter alignment"
  | |     )
  | |_____^ the evaluated program panicked at 'Attempted conversion to a type with a stricter alignment', $WORKSPACE/src/cast.rs:910:5
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: the above error was encountered while instantiating `fn <std::vec::Vec<[u16; 2]> as bytemuck::ReinterpretInner<'_, std::vec::Vec<u32>>>::reinterpret_inner`
 --> tests/ui/reinterpret_inner_vec.rs:5:21
  |
5 |   let _: Vec<u32> = vec![[0u16; 2]; 2].reinterpret_inner();
  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0080]: evaluation of `<bytemuck::cast::VecT as bytemuck::cast::AssertClassContraints<u64, [u32; 2]>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  |     const ASSERT: () = assert!(
  |  ______________________^
  | |     Src::ALIGN == Dst::ALIGN,
  | |     "Attempted conversion between `Vec` types with different alignments"
  | |   );
  | |___^ the evaluated program panicked at 'Attempted conversion between `Vec` types with different alignments', $WORKSPACE/src/cast.rs:1342:22
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: the above error was encountered while instantiating `fn <std::vec::Vec<u64> as bytemuck::ReinterpretInner<'_, std::vec::Vec<[u32; 2]>>>::reinterpret_inner`
 --> tests/ui/reinterpret_inner_vec.rs:6:26
  |
6 |   let _: Vec<[u32; 2]> = vec![0u64].reinterpret_inner();
  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0080]: evaluation of `<bytemuck::cast::RawSlice<[u8; 1]> as bytemuck::cast::CastRaw<bytemuck::cast::RawSlice<()>>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  | /     assert!(
  | |       size_of::<Src>() == size_of::<Dst>()
  | |         || (size_of::<Dst>() != 0 && size_of::<Src>() % size_of::<Dst>() == 0),
  | |       "Attempted conversion between slice types which may not succeed"
  | |     );
  | |_____^ the evaluated program panicked at 'Attempted conversion between slice types which may not succeed', $WORKSPACE/src/cast.rs:905:5
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: the above error was encountered while instantiating `fn <std::vec::Vec<[u8; 1]> as bytemuck::ReinterpretInner<'_, std::vec::Vec<()>>>::reinterpret_inner`
 --> tests/ui/reinterpret_inner_vec.rs:8:20
  |
8 |   let _: Vec<()> = vec![[0u8; 1]].reinterpret_inner();
  |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0080]: evaluation of `<bytemuck::cast::RawSlice<u8> as bytemuck::cast::CastRaw<bytemuck::cast::RawSlice<[u8; 2]>>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  | /     assert!(
  | |       size_of::<Src>() == size_of::<Dst>()
  | |         || (size_of::<Dst>() != 0 && size_of::<Src>() % size_of::<Dst>() == 0),
  | |       "Attempted conversion between slice types which may not succeed"
  | |     );
  | |_____^ the evaluated program panicked at 'Attempted conversion between slice types which may not succeed', $WORKSPACE/src/cast.rs:905:5
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: the above error was encountered while instantiating `fn <std::vec::Vec<u8> as bytemuck::ReinterpretInner<'_, std::vec::Vec<[u8; 2]>>>::reinterpret_inner`
 --> tests/ui/reinterpret_inner_vec.rs:9:25
  |
9 |   let _: Vec<[u8; 2]> = vec![0u8].reinterpret_inner();
  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0080]: evaluation of `<bytemuck::cast::RawSlice<u16> as bytemuck::cast::CastRaw<bytemuck::cast::RawSlice<[u16; 2]>>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  | /     assert!(
  | |       size_of::<Src>() == size_of::<Dst>()
  | |         || (size_of::<Dst>() != 0 && size_of::<Src>() % size_of::<Dst>() == 0),
  | |       "Attempted conversion between slice types which may not succeed"
  | |     );
  | |_____^ the evaluated program panicked at 'Attempted conversion between slice types which may not succeed', $WORKSPACE/src/cast.rs:905:5
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: the above error was encountered while instantiating `fn <std::vec::Vec<u16> as bytemuck::ReinterpretInner<'_, std::vec::Vec<[u16; 2]>>>::reinterpret_inner`
  --> tests/ui/reinterpret_inner_vec.rs:10:26
   |
10 |   let _: Vec<[u16; 2]> = vec![0u16].reinterpret_inner();
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0080]: evaluation of `<bytemuck::cast::RawSlice<u64> as bytemuck::cast::CastRaw<bytemuck::cast::RawSlice<[u64; 2]>>>::ASSERT` failed
 --> $WORKSPACE/src/cast.rs
  |
  | /     assert!(
  | |       size_of::<Src>() == size_of::<Dst>()
  | |         || (size_of::<Dst>() != 0 && size_of::<Src>() % size_of::<Dst>() == 0),
  | |       "Attempted conversion between slice types which may not succeed"
  | |     );
  | |_____^ the evaluated program panicked at 'Attempted conversion between slice types which may not succeed', $WORKSPACE/src/cast.rs:905:5
  |
  = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)

note: the above error was encountered while instantiating `fn <std::vec::Vec<u64> as bytemuck::ReinterpretInner<'_, std::vec::Vec<[u64; 2]>>>::reinterpret_inner`
  --> tests/ui/reinterpret_inner_vec.rs:11:26
   |
11 |   let _: Vec<[u64; 2]> = vec![0u64].reinterpret_inner();
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
